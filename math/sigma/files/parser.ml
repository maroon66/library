type token =
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | SUM
  | PLUS
  | MINUS
  | MUL
  | DIV
  | POW
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | EQUAL
  | BAR
  | COMMA
  | AND
  | OR
  | AT
  | IDENT of (string)
  | CONST of (int)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Syntax
open Util
let muls = function
  | hd :: tl -> List.fold_left (fun a b -> Mul(a, b)) hd tl
  | _ -> assert false
# 35 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACKET *);
  260 (* RBRACKET *);
  261 (* SUM *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* MUL *);
  265 (* DIV *);
  266 (* POW *);
  267 (* LESS_EQUAL *);
  268 (* GREATER_EQUAL *);
  269 (* LESS *);
  270 (* GREATER *);
  271 (* EQUAL *);
  272 (* BAR *);
  273 (* COMMA *);
  274 (* AND *);
  275 (* OR *);
  276 (* AT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  277 (* IDENT *);
  278 (* CONST *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\005\000\
\005\000\005\000\005\000\005\000\006\000\006\000\006\000\006\000\
\006\000\008\000\008\000\008\000\008\000\008\000\008\000\007\000\
\007\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\002\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\003\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\001\000\
\003\000\001\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\014\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\022\000\
\000\000\006\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\013\000\000\000\
\000\000\042\000\000\000\000\000\000\000\024\000\000\000\041\000\
\027\000\000\000\000\000\032\000\033\000\030\000\031\000\029\000\
\017\000\018\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\038\000\039\000\
\036\000\037\000\035\000"

let yydgoto = "\002\000\
\010\000\015\000\057\000\033\000\016\000\017\000\067\000\068\000"

let yysindex = "\003\000\
\204\255\000\000\204\255\226\255\243\254\204\255\204\255\000\000\
\000\000\000\000\166\255\191\255\226\255\249\254\213\255\044\255\
\000\000\071\255\204\255\000\255\000\255\204\255\226\255\251\254\
\204\255\204\255\204\255\248\254\253\254\249\000\000\000\000\000\
\007\255\000\000\138\255\041\255\204\255\204\255\000\000\226\255\
\226\255\204\255\204\255\204\255\204\255\204\255\237\000\235\255\
\062\255\204\255\237\000\237\000\000\255\000\000\000\000\006\255\
\012\255\000\000\204\255\019\255\007\255\000\000\227\000\000\000\
\000\000\024\255\150\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\237\000\204\255\249\000\000\255\000\000\204\255\
\204\255\204\255\204\255\204\255\227\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\000\000\000\000\093\255\208\000\000\000\
\000\000\000\000\000\000\001\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\167\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\000\000\151\000\170\000\067\000\000\000\000\000\116\255\
\051\000\000\000\000\000\000\000\089\000\000\000\009\255\000\000\
\000\000\036\255\195\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\189\000\000\000\000\000\111\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\231\255\230\255\024\000\229\255\016\000\244\255"

let yytablesize = 527
let yytable = "\011\000\
\003\000\012\000\058\000\001\000\020\000\021\000\061\000\019\000\
\037\000\029\000\026\000\035\000\026\000\054\000\043\000\050\000\
\060\000\047\000\055\000\018\000\048\000\076\000\004\000\051\000\
\052\000\053\000\026\000\026\000\018\000\077\000\069\000\070\000\
\071\000\072\000\061\000\063\000\036\000\028\000\018\000\028\000\
\079\000\040\000\062\000\001\000\005\000\018\000\049\000\039\000\
\075\000\058\000\002\000\086\000\000\000\064\000\028\000\018\000\
\018\000\078\000\040\000\041\000\000\000\040\000\041\000\065\000\
\066\000\074\000\011\000\087\000\088\000\089\000\090\000\091\000\
\000\000\000\000\085\000\000\000\000\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\000\000\000\000\
\016\000\000\000\000\000\000\000\018\000\014\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\020\000\000\000\
\000\000\014\000\014\000\000\000\014\000\000\000\014\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\008\000\014\000\000\000\000\000\000\000\
\014\000\014\000\022\000\034\000\023\000\000\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\009\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\031\000\032\000\
\080\000\081\000\082\000\083\000\084\000\000\000\022\000\000\000\
\023\000\010\000\024\000\025\000\026\000\027\000\028\000\029\000\
\000\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\030\000\031\000\032\000\019\000\000\000\000\000\022\000\
\034\000\023\000\034\000\024\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\000\000\003\000\000\000\004\000\040\000\
\005\000\006\000\007\000\031\000\032\000\022\000\000\000\023\000\
\000\000\024\000\025\000\026\000\027\000\028\000\029\000\000\000\
\008\000\009\000\013\000\000\000\004\000\038\000\005\000\006\000\
\007\000\031\000\032\000\022\000\073\000\023\000\000\000\024\000\
\025\000\026\000\027\000\028\000\029\000\000\000\008\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\032\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\000\000\003\000\003\000\003\000\003\000\003\000\
\000\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\043\000\004\000\004\000\004\000\004\000\004\000\000\000\004\000\
\004\000\004\000\004\000\004\000\004\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\000\000\005\000\
\005\000\005\000\005\000\005\000\000\000\005\000\005\000\005\000\
\005\000\005\000\005\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\011\000\011\000\
\011\000\011\000\000\000\011\000\011\000\011\000\011\000\011\000\
\011\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\016\000\016\000\016\000\016\000\016\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\008\000\000\000\008\000\
\000\000\008\000\008\000\000\000\000\000\000\000\008\000\008\000\
\008\000\008\000\008\000\000\000\008\000\008\000\008\000\008\000\
\009\000\000\000\009\000\000\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\009\000\000\000\009\000\
\009\000\009\000\009\000\010\000\000\000\010\000\000\000\010\000\
\010\000\000\000\000\000\000\000\010\000\010\000\010\000\010\000\
\010\000\000\000\010\000\010\000\010\000\010\000\019\000\000\000\
\019\000\000\000\019\000\019\000\034\000\000\000\034\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\019\000\
\019\000\040\000\000\000\040\000\034\000\034\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\022\000\000\000\023\000\000\000\024\000\
\025\000\026\000\027\000\028\000\029\000\022\000\000\000\023\000\
\000\000\024\000\000\000\000\000\027\000\028\000\029\000\031\000\
\032\000\003\000\000\000\004\000\000\000\005\000\006\000\007\000\
\000\000\031\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\056\000"

let yycheck = "\001\000\
\000\000\003\000\030\000\001\000\006\000\007\000\033\000\021\001\
\016\001\010\001\002\001\013\000\004\001\022\001\000\000\021\001\
\010\001\019\000\022\001\004\000\022\000\016\001\000\000\025\000\
\026\000\027\000\018\001\019\001\013\000\018\001\043\000\044\000\
\045\000\046\000\061\000\037\000\013\000\002\001\023\000\004\001\
\022\001\018\001\002\001\000\000\000\000\030\000\023\000\004\001\
\050\000\077\000\000\000\077\000\255\255\038\000\019\001\040\000\
\041\000\059\000\018\001\019\001\255\255\018\001\019\001\040\000\
\041\000\004\001\000\000\080\000\081\000\082\000\083\000\084\000\
\255\255\255\255\076\000\255\255\255\255\255\255\255\255\018\001\
\019\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\000\000\255\255\255\255\255\255\077\000\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\000\000\255\255\
\255\255\021\001\022\001\255\255\001\001\255\255\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\000\000\017\001\255\255\255\255\255\255\
\021\001\022\001\001\001\002\001\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\000\000\255\255\
\255\255\255\255\017\001\255\255\255\255\255\255\021\001\022\001\
\011\001\012\001\013\001\014\001\015\001\255\255\001\001\255\255\
\003\001\000\000\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\020\001\021\001\022\001\000\000\255\255\255\255\001\001\
\002\001\003\001\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\255\255\255\255\001\001\255\255\003\001\000\000\
\005\001\006\001\007\001\021\001\022\001\001\001\255\255\003\001\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\021\001\022\001\001\001\255\255\003\001\017\001\005\001\006\001\
\007\001\021\001\022\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\018\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\002\001\255\255\004\001\
\255\255\006\001\007\001\255\255\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\019\001\020\001\
\002\001\255\255\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\002\001\255\255\004\001\255\255\006\001\
\007\001\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\019\001\020\001\002\001\255\255\
\004\001\255\255\006\001\007\001\002\001\255\255\004\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\002\001\255\255\004\001\018\001\019\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\001\001\255\255\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\001\001\255\255\003\001\
\255\255\005\001\255\255\255\255\008\001\009\001\010\001\021\001\
\022\001\001\001\255\255\003\001\255\255\005\001\006\001\007\001\
\255\255\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  SUM\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  POW\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  EQUAL\000\
  BAR\000\
  COMMA\000\
  AND\000\
  OR\000\
  AT\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  CONST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 49 "parser.mly"
                                   ( (_1, []) )
# 302 "parser.ml"
               : Syntax.t * Syntax.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assum) in
    Obj.repr(
# 50 "parser.mly"
                                   ( (_1, _3) )
# 310 "parser.ml"
               : Syntax.t * Syntax.t list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 53 "parser.mly"
                                   ( _2 )
# 317 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 54 "parser.mly"
                                   ( neg _2 )
# 324 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 55 "parser.mly"
                                   ( Mul(_1, _2) )
# 332 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 56 "parser.mly"
                                   ( _2 )
# 339 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cond) in
    Obj.repr(
# 57 "parser.mly"
                                   ( _2 )
# 346 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 58 "parser.mly"
                                   ( Sum(_2, _3) )
# 354 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 59 "parser.mly"
                                   ( Add(_1, _3) )
# 362 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 60 "parser.mly"
                                   ( sub _1 _3 )
# 370 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 61 "parser.mly"
                                   ( Mul(_1, _3) )
# 378 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 62 "parser.mly"
                                   ( Div(_1, _3) )
# 386 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 63 "parser.mly"
                                   ( Pow(_1, _3) )
# 394 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 64 "parser.mly"
                                   ( Const(_1) )
# 401 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
                                   ( Var(_1) )
# 408 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp2) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 68 "parser.mly"
                                   ( Mul(_1, _2) )
# 416 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 69 "parser.mly"
                                   ( _2 )
# 423 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cond) in
    Obj.repr(
# 70 "parser.mly"
                                   ( _2 )
# 430 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 71 "parser.mly"
                                   ( Sum(_2, _3) )
# 438 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 72 "parser.mly"
                                   ( Mul(_1, _3) )
# 446 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 73 "parser.mly"
                                   ( Pow(_1, _3) )
# 454 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
                                   ( Const(_1) )
# 461 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                                   ( Var(_1) )
# 468 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cond) in
    Obj.repr(
# 78 "parser.mly"
                                   ( _2 )
# 475 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conds) in
    Obj.repr(
# 79 "parser.mly"
                                   ( muls (snd _1) )
# 482 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 80 "parser.mly"
                                   ( CMod(_1, _3) )
# 490 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cond) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cond) in
    Obj.repr(
# 81 "parser.mly"
                                   ( Mul(_1, _3) )
# 498 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cond) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cond) in
    Obj.repr(
# 82 "parser.mly"
                                   ( cor _1 _3 )
# 506 "parser.ml"
               : 'cond))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 85 "parser.mly"
                                   ( (_1, cross ceq _1 (fst _3) @ snd _3) )
# 514 "parser.ml"
               : 'conds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 86 "parser.mly"
                                   ( (_1, cross cl _1 (fst _3) @ snd _3) )
# 522 "parser.ml"
               : 'conds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 87 "parser.mly"
                                   ( (_1, cross cg _1 (fst _3) @ snd _3) )
# 530 "parser.ml"
               : 'conds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 88 "parser.mly"
                                   ( (_1, cross cle _1 (fst _3) @ snd _3) )
# 538 "parser.ml"
               : 'conds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 89 "parser.mly"
                                   ( (_1, cross cge _1 (fst _3) @ snd _3) )
# 546 "parser.ml"
               : 'conds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 92 "parser.mly"
                                   ( (_1, []) )
# 553 "parser.ml"
               : 'conds2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 93 "parser.mly"
                                   ( (_1, cross ceq _1 (fst _3) @ snd _3) )
# 561 "parser.ml"
               : 'conds2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 94 "parser.mly"
                                   ( (_1, cross cl _1 (fst _3) @ snd _3) )
# 569 "parser.ml"
               : 'conds2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 95 "parser.mly"
                                   ( (_1, cross cg _1 (fst _3) @ snd _3) )
# 577 "parser.ml"
               : 'conds2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 96 "parser.mly"
                                   ( (_1, cross cle _1 (fst _3) @ snd _3) )
# 585 "parser.ml"
               : 'conds2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'conds2) in
    Obj.repr(
# 97 "parser.mly"
                                   ( (_1, cross cge _1 (fst _3) @ snd _3) )
# 593 "parser.ml"
               : 'conds2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 100 "parser.mly"
                                   ( [_1] )
# 600 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 101 "parser.mly"
                                   ( _1 :: _3 )
# 608 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conds) in
    Obj.repr(
# 104 "parser.mly"
                                   ( (snd _1) )
# 615 "parser.ml"
               : 'assum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 105 "parser.mly"
                                   ( [CMod(_1, _3)] )
# 623 "parser.ml"
               : 'assum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assum) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assum) in
    Obj.repr(
# 106 "parser.mly"
                                   ( _1 @ _3 )
# 631 "parser.ml"
               : 'assum))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t * Syntax.t list)
